[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "extract_eeg_data",
        "importPath": "printData",
        "description": "printData",
        "isExtraImport": true,
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "printBuffer",
        "importPath": "printData",
        "description": "printData",
        "isExtraImport": true,
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "printOneChannel",
        "importPath": "printData",
        "description": "printData",
        "isExtraImport": true,
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "segmentChannelData",
        "importPath": "printData",
        "description": "printData",
        "isExtraImport": true,
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "printThreshold",
        "importPath": "printData",
        "description": "printData",
        "isExtraImport": true,
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "bufferSizesFromChannel",
        "importPath": "buffer",
        "description": "buffer",
        "isExtraImport": true,
        "detail": "buffer",
        "documentation": {}
    },
    {
        "label": "bufferChannel",
        "importPath": "buffer",
        "description": "buffer",
        "isExtraImport": true,
        "detail": "buffer",
        "documentation": {}
    },
    {
        "label": "detectWithThreshold",
        "importPath": "detect",
        "description": "detect",
        "isExtraImport": true,
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "pyxdf",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyxdf",
        "description": "pyxdf",
        "detail": "pyxdf",
        "documentation": {}
    },
    {
        "label": "bufferSizesFromChannel",
        "kind": 2,
        "importPath": "buffer",
        "description": "buffer",
        "peekOfCode": "def bufferSizesFromChannel(channel_data,bufferSize=150):\n    channelSize = len(channel_data)\n    bufferStartPoints = [0]\n    check = bufferSize\n    while check <= channelSize:\n        bufferStartPoints.append(check)\n        check += bufferSize\n    return bufferStartPoints\ndef bufferChannel(channel_data, bufferStarts):\n    bufferListSize = len(bufferStarts)",
        "detail": "buffer",
        "documentation": {}
    },
    {
        "label": "bufferChannel",
        "kind": 2,
        "importPath": "buffer",
        "description": "buffer",
        "peekOfCode": "def bufferChannel(channel_data, bufferStarts):\n    bufferListSize = len(bufferStarts)\n    bufferedChannel = []\n    for i in  range(bufferListSize - 1): #-1 to prevent overflow with i+1\n        start = bufferStarts[i]\n        stop = bufferStarts[i+1]\n        bufferedChannel.append(channel_data[start:stop])\n    return bufferedChannel",
        "detail": "buffer",
        "documentation": {}
    },
    {
        "label": "detectWithThreshold",
        "kind": 2,
        "importPath": "detect",
        "description": "detect",
        "peekOfCode": "def detectWithThreshold(bChannel,threshold=150):\n    ret = []\n    for buffer in bChannel:   \n        ret.append(any(buffer[:,1] >= threshold))    \n    return ret",
        "detail": "detect",
        "documentation": {}
    },
    {
        "label": "extract_eeg_data",
        "kind": 2,
        "importPath": "printData",
        "description": "printData",
        "peekOfCode": "def extract_eeg_data(xdf_path):\n    streams, _ = pyxdf.load_xdf(xdf_path)\n    for stream in streams:\n        data = np.array(stream['time_series'])\n        return data\n    raise RuntimeError(\"Aucun flux EEG trouv√© dans le fichier .xdf.\")\ndef printChannels(channels, colors=None):\n    num_channels = len(channels)\n    if num_channels == 0:\n        print(\"No channels to display.\")",
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "printChannels",
        "kind": 2,
        "importPath": "printData",
        "description": "printData",
        "peekOfCode": "def printChannels(channels, colors=None):\n    num_channels = len(channels)\n    if num_channels == 0:\n        print(\"No channels to display.\")\n        return\n    if colors is None:\n        colors = ['red', 'blue', 'green', 'orange']\n    # Handle up to 4 subplots in 1 column\n    fig, axs = plt.subplots(num_channels, 1, figsize=(12, 3 * num_channels), sharex=True)\n    if num_channels == 1:",
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "segmentChannelData",
        "kind": 2,
        "importPath": "printData",
        "description": "printData",
        "peekOfCode": "def segmentChannelData(raw_data):\n    numChannels = raw_data.shape[1] // 2\n    channels = []\n    for i in range(numChannels):\n        x = raw_data[:, 2 * i]\n        y = raw_data[:, 2 * i + 1]\n        channel_data = np.stack((x, y), axis=1) \n        channels.append(channel_data)\n    return channels\nimport numpy as np",
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "printOneChannel",
        "kind": 2,
        "importPath": "printData",
        "description": "printData",
        "peekOfCode": "def printOneChannel(channel_data, color='blue', num=1, name=None):\n    \"\"\"\n    Plots a single EEG channel's 2D data (x and y values) over sample indices.\n    Parameters:\n    - channel_data: Nx2 array with x and y data for one channel.\n    - color: matplotlib color for the plot.\n    - num: channel number (for labeling).\n    \"\"\"\n    # X-axis: time/sample index\n    time = np.arange(len(channel_data))",
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "printBuffer",
        "kind": 2,
        "importPath": "printData",
        "description": "printData",
        "peekOfCode": "def printBuffer(channel_data, buffers):\n    printOneChannel(channel_data, \"blue\") \n    for buffer_point in buffers:\n        plt.axvline(x=buffer_point, color='green', linestyle='--', linewidth=1)\ndef printThreshold(channel_data, threshold,buffer):\n    printBuffer(channel_data,buffer)\n    plt.axhline(y=threshold, color=\"orange\", linestyle='--', linewidth=1)",
        "detail": "printData",
        "documentation": {}
    },
    {
        "label": "printThreshold",
        "kind": 2,
        "importPath": "printData",
        "description": "printData",
        "peekOfCode": "def printThreshold(channel_data, threshold,buffer):\n    printBuffer(channel_data,buffer)\n    plt.axhline(y=threshold, color=\"orange\", linestyle='--', linewidth=1)",
        "detail": "printData",
        "documentation": {}
    }
]